#include <Arduboy2.h>
#include "Tinyfont.h"

/*
 * Normal font
 *  -> Max cols: 21
 *  -> Max lines: 8
 * 
 * Tiny font
 *  -> Max cols: 25
 *  -> Max lines: 13
 */

int gameMode = 99;
long score = 0;
char scoreString[9];
const char* textToDisplay = "";
const int buttonPin = 2;
int buttonState = 0;
unsigned long frameCounter = 0;
int animationStep = 1;
int animationStepMax = 4;
const byte ButtonPin = 2;
const unsigned long DebounceTime = 10;
boolean ButtonWasPressed = false;
unsigned long ButtonStateChangeTime = 0; // Debounce timer
int currentIcon = 0;
int cuddleCounter = 0;
int cleanCounter = 0;
int cleanSequence = 0;
int gameCounter = 0;
int gameSequence = 0;
long gamePick = 0;
int strawberryFoodStock = 0;
int appleFoodStock = 10000;
int iceCreamFoodStock = 1;
int grapeFoodStock = 0;
int milkFoodStock = 0;
int orangeFoodStock = 0;
int lessonSequence = 0;
int snailCounter = 0;
int kokoXPos = 0;
long randomQuote = 0;
int feedSequence = 0;
int feedCounter = 0;
int selectedFood = 0;
int superHappyCounter = 0;
long randomVisit = 0;
int randomVisitSequence = 0;
int randomVisitCounter = 0;
long randomGameIconXPos = 0;
long randomFoodType = 0;
int gameIconXPos = 0;
int versionCounter = 0;

// Cat status variables
// Status metrics
// 0 = depleted, 1 = low, 2 = average, 3 = full
long catHunger = random(1, 4);
long catHygiene = random(1, 4);
long catMorale = random(1, 4);
long catEducation = random(1, 3);
long catEntertainment = random(1, 4);

// Status change timing (decrement status variable every x frames)
// Production timings
unsigned long catHungerStep = random(2000, 18000);
// unsigned long catHungerStep = 1;
unsigned long catHygieneStep = random(5000, 20000);
// unsigned long catHygieneStep = 1;
unsigned long catMoraleStep = random(200, 2000);
unsigned long catEducationStep = random(100, 1000);
// unsigned long catEducationStep = 3;
unsigned long catEntertainmentStep = random(1900, 19000);

// Tracking status checks
unsigned long lastCatHungerCheck = 0;
unsigned long lastCatHygieneCheck = 0;
unsigned long lastCatMoraleCheck = 0;
unsigned long lastCatEducationCheck = 0;
unsigned long lastCatEntertainmentCheck = 0;

const uint8_t PROGMEM cuddle_heart_11x10[] = {
11, 10,
0x1c, 0x3e, 0x7f, 0xff, 0xfe, 0xfc, 0xfe, 0xff, 0x7f, 0x3e, 0x1c, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM cat_sitting_001_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM cat_sitting_002_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM cat_sitting_003_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM cat_sitting_004_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM cat_sitting_006_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM cat_sitting_007_48x48[] = {
48, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 
0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f, 0xf0, 0xf0, 0xf0, 0xf0, 
0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 
};

const uint8_t PROGMEM pizza_26x28[] = {
26, 28,
0xf0, 0xf0, 0xfc, 0xfc, 0x3f, 0x3f, 0xcf, 0xcf, 0xcf, 0xcf, 0x0f, 0x0f, 0xcf, 0xcf, 0xcf, 0xcf, 0x0f, 0x0f, 0xcf, 0xcf, 0x3f, 0x3f, 0xfc, 0xfc, 0xf0, 0xf0, 
0x00, 0x00, 0x0c, 0x0c, 0xcf, 0xcf, 0x03, 0x03, 0xcf, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x3c, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0x0c, 0x0c, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0xff, 0xff, 0x3f, 0x3f, 0xfc, 0xfc, 0xf0, 0xf0, 0xfc, 0xfc, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM bubbles_30x30[] = {
30, 30,
0xf0, 0xf0, 0x0c, 0x0c, 0xf3, 0xf3, 0xf3, 0xf3, 0x03, 0x03, 0x03, 0x03, 0x0c, 0x0c, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x0f, 0x0f, 0x30, 0x30, 0xc0, 0xc0, 0xc0, 0xc0, 0xcc, 0xcc, 0xc3, 0xc3, 0x30, 0x30, 0x0f, 0x0f, 0xc0, 0xc0, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x0c, 0x0c, 0x30, 0x30, 0xc0, 0xc0, 
0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0xf0, 0xf0, 0x30, 0x30, 0xc0, 0xc0, 0x00, 0x00, 0x0f, 0x0f, 0x30, 0x30, 0xc3, 0xc3, 0xc3, 0xc3, 0xcc, 0xcc, 0x30, 0x30, 0x0f, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x33, 0x33, 0x30, 0x30, 0x30, 0x30, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM cuddle_24x24[] = {
24, 24,
0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 
0x3f, 0x3f, 0xff, 0xff, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xff, 0xff, 0x3f, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x3c, 0x3c, 0xf0, 0xf0, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM study_26x28[] = {
26, 28,
0xfc, 0xfc, 0xff, 0xff, 0x0f, 0x0f, 0xf3, 0xf3, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xf3, 0xf3, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0x3f, 0x3f, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0x3f, 0x3f, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0x0f, 0x0f, 0xf3, 0xf3, 0xf3, 0xf3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0x03, 0x03, 0xc3, 0xc3, 
0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 
};

const uint8_t PROGMEM play_32x20[] = {
32, 20,
0xf0, 0xf0, 0x0c, 0x0c, 0xf3, 0xf3, 0xfc, 0xfc, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0x3f, 0x3f, 0xfc, 0xfc, 0xf0, 0xf0, 
0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0xf3, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xf3, 0xf3, 0xff, 0xff, 0xf3, 0xf3, 0xff, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x03, 0x03, 0x0c, 0x0c, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x03, 0x03, 0x0c, 0x0c, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 
};

const uint8_t PROGMEM ghost_28x28[] = {
28, 28,
0x00, 0x00, 0xf0, 0xf0, 0x3c, 0x3c, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0x3c, 0x3c, 0x0f, 0x0f, 0x0f, 0x0f, 0x3c, 0x3c, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x3c, 0xf0, 0xf0, 
0x03, 0x03, 0x0f, 0x0f, 0xff, 0xff, 0xfc, 0xfc, 0xff, 0xff, 0x3c, 0x3c, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xcf, 0x3f, 0x3f, 0xff, 0xff, 0xfc, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM happy_cat_28x28[] = {
28, 28,
0xc0, 0xc0, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf3, 0xf3, 0xf3, 0xf3, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM speech_bubble_56x48[] = {
56, 48,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0x70, 0x7f, 0x7f, 0x7f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x7f, 0x7f, 0x7f, 0x70, 0xf0, 0xf0, 0xf0, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0e, 0xfe, 0xfe, 0xfe, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xfe, 0xfe, 0xfe, 0x0e, 0x0f, 0x0f, 0x0f, 
};

const uint8_t PROGMEM casino_frame_40x40[] = {
40, 40,
0x7e, 0x71, 0x71, 0x71, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x71, 0x71, 0x71, 0x7e, 
0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 
0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 
0x7e, 0x8e, 0x8e, 0x8e, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0x8e, 0x8e, 0x8e, 0x7e, 
};

const uint8_t PROGMEM bar_28x28[] = {
28, 28,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfd, 0x25, 0x25, 0xd9, 0x01, 0xf9, 0x25, 0x25, 0xf9, 0x01, 0xfd, 0x25, 0x25, 0xd9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x15, 0x15, 0x15, 0x14, 0x14, 0x15, 0x14, 0x14, 0x15, 0x14, 0x15, 0x14, 0x14, 0x15, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM apple_28x28[] = {
28, 28,
0x00, 0x00, 0x00, 0x0f, 0x0f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x0c, 0x0c, 0xf0, 0xf0, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xfc, 0xfc, 0x0f, 0x0f, 0x03, 0x03, 0xc3, 0xc3, 0xfc, 0xfc, 0xfc, 0xfc, 0xff, 0xff, 0xfc, 0xfc, 0xcc, 0xcc, 0xcf, 0xcf, 0xf3, 0xf3, 0xff, 0xff, 0xfc, 0xfc, 0x00, 
0x00, 0x3f, 0x3f, 0xc0, 0xc0, 0x00, 0x00, 0x0f, 0x0f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x0f, 0x0f, 0x0f, 0x0f, 0xff, 0xff, 0x3f, 0x3f, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM strawberry_28x28[] = {
28, 28,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x30, 0x30, 0xcc, 0xcc, 0xcc, 0xcc, 0x30, 0x30, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xfc, 0xfc, 0xcf, 0xcf, 0xff, 0xff, 0xfc, 0xfc, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xfc, 0xfc, 0xff, 0xff, 0x3f, 0x3f, 0xfc, 0xfc, 0x00, 0x00, 
0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x3f, 0x3f, 0xf3, 0xf3, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xfc, 0xfc, 0xff, 0xff, 0x3f, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM grape_28x28[] = {
28, 28,
0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xc3, 0xc3, 0xcc, 0xcc, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 
0x0f, 0x0f, 0x30, 0x30, 0x33, 0x33, 0xc0, 0xc0, 0xcf, 0xcf, 0x3f, 0x3f, 0x30, 0x30, 0x33, 0x33, 0x0f, 0x0f, 0xc0, 0xc0, 0xcf, 0xcf, 0x30, 0x30, 0x33, 0x33, 0x0f, 0x0f, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x30, 0x30, 0x33, 0x33, 0x3f, 0x3f, 0x0f, 0x0f, 0xc0, 0xc0, 0xcf, 0xcf, 0x30, 0x30, 0x33, 0x33, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM milk_28x28[] = {
28, 28,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xd0, 0xd8, 0xdc, 0xdd, 0xdd, 0xdd, 0x1d, 0xed, 0xf5, 0x38, 0x7d, 0xfc, 0x78, 0x30, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x00, 0x3f, 0x3f, 0x38, 0x3f, 0x3e, 0x3f, 0x38, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM orange_28x28[] = {
28, 28,
0xe0, 0xe0, 0xf8, 0xf8, 0x18, 0x18, 0xe0, 0xe0, 0xe0, 0xe0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xe0, 0xe0, 0xf8, 0xf8, 0x18, 0x18, 0xe0, 0xe0, 
0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xe7, 0xf9, 0xf9, 0x7f, 0x7f, 0xe7, 0xe7, 0x7f, 0x7f, 0xf9, 0xf9, 0xe7, 0xe7, 0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 
0x07, 0x07, 0x1f, 0x1f, 0x7e, 0x7e, 0xf9, 0xf9, 0xe7, 0xe7, 0x9f, 0x9f, 0x9e, 0x9e, 0x9f, 0x9f, 0x9e, 0x9e, 0x9f, 0x9f, 0xe7, 0xe7, 0x79, 0x79, 0x1e, 0x1e, 0x07, 0x07, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM koko_le_snail_26x22[] = {
26, 22,
0x3c, 0x3c, 0xff, 0xff, 0xcf, 0xcf, 0x3c, 0x3c, 0xc0, 0xc0, 0x3c, 0x3c, 0xcf, 0xcf, 0xff, 0xff, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xfc, 0xfc, 0xcf, 0xcf, 0xcf, 0xcf, 0xff, 0xff, 0xfc, 0xfc, 0xc0, 0xc0, 0xfc, 0xfc, 0x0f, 0x0f, 0xf3, 0xf3, 0x0f, 0x0f, 0xfc, 0xfc, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3c, 0x3c, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x3c, 0x3c, 0x0f, 0x0f, 
};

const uint8_t PROGMEM super_happy_28x28[] = {
28, 28,
0xc0, 0xc0, 0xf0, 0xf0, 0xfc, 0xfc, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0xff, 0xff, 0xfc, 0xfc, 0xf0, 0xf0, 0xc0, 0xc0, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x30, 0x30, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x30, 0x30, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xf0, 0xc0, 0xc0, 0x3f, 0x3f, 0x3c, 0x3c, 0x3c, 0x3c, 0x3f, 0x3f, 0xc0, 0xc0, 0xf0, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM cindy_28x26[] = {
28, 26,
0x0f, 0x0f, 0xf3, 0xf3, 0xfc, 0xfc, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xf3, 0xf3, 0x0f, 0x0f, 
0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00, 
0x00, 0x00, 0xf0, 0xf0, 0xfc, 0xfc, 0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0x3c, 0x3c, 0xfc, 0xfc, 0xf0, 0xf0, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t PROGMEM matcha_30x32[] = {
30, 32,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0x30, 0x30, 0x30, 0x30, 0xc0, 0xc0, 0xc3, 0xc3, 0x3c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc3, 0xc3, 0xcc, 0xcc, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xf3, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff, 0xfc, 0xfc, 
0x03, 0x03, 0x0f, 0x0f, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x0f, 0x0f, 0x0c, 0x0c, 0x0c, 0x0c, 0x0f, 0x0f, 0x03, 0x03, 
};

const uint8_t PROGMEM coco_cake_28x32[] = {
28, 32,
0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x3c, 0x3c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x3c, 0x00, 0x00, 0xf0, 0xf0, 0x00, 0x00, 0xf0, 0xf0, 
0x0c, 0x0c, 0x0c, 0x0c, 0x33, 0x33, 0x33, 0x33, 0xcc, 0xcc, 0xc0, 0xc0, 0x30, 0x30, 0x30, 0x30, 0xf0, 0xf0, 0xf0, 0xf0, 0x3c, 0x3c, 0xcf, 0xcf, 0x30, 0x30, 0xff, 0xff, 
0xc3, 0xc3, 0xc3, 0xc3, 0x0c, 0x0c, 0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xc3, 0xc3, 0xc3, 0xc3, 0x0c, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xcf, 0xff, 0xff, 0x3f, 0x3f, 
0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x0c, 0x0c, 0x0c, 0x0c, 0x30, 0x30, 0x30, 0x30, 0xc3, 0xc3, 0x00, 0x00, 0xf3, 0xf3, 0x3f, 0x3f, 0x0f, 0x0f, 0x03, 0x03, 
};

const uint8_t PROGMEM door_28x30[] = {
28, 30,
0xff, 0xff, 0x03, 0x03, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x03, 0x03, 0xff, 0xff, 
0xff, 0xff, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xc0, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xc0, 0xc0, 0xff, 0xff, 0xc0, 0xc0, 0x00, 0x00, 0xff, 0xff, 
0xff, 0xff, 0x00, 0x00, 0xf0, 0xf0, 0xff, 0xff, 0x0f, 0x0f, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0x0f, 0x0f, 0xff, 0xff, 0x3f, 0x3f, 0x00, 0x00, 0xff, 0xff, 
0x3f, 0x3f, 0x00, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x3c, 0x3c, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3c, 0x3c, 0x3f, 0x3f, 0x30, 0x30, 0x00, 0x00, 0x3f, 0x3f, 
};

Arduboy2 arduboy;
Tinyfont tinyfont = Tinyfont(arduboy.sBuffer, Arduboy2::width(), Arduboy2::height());

void setup() {
  arduboy.begin();
  arduboy.setFrameRate(4);
  /*
  frameRate = 3 FPS
  1 sec = 3
  10 sec = 30
  30 sec = 90
  1 min = 180
  10 min = 1800
  30 min = 5400
  1 h = 18000
  */
  arduboy.clear();
  arduboy.setTextSize(1);
  arduboy.setTextWrap(true);
  arduboy.setTextColor(WHITE);
}

void checkButton()
{
  arduboy.pollButtons();
  if ( arduboy.justPressed(A_BUTTON) || arduboy.justPressed(B_BUTTON)) {
    if (gameMode == 1) {
      // Do something only if cat needs something
      switch (currentIcon) {
        case 2:
          // Play
          gameCounter = 0;
          gameSequence = 0;
          gameMode = 6;
          break;
        case 3:
          // Study
          randomQuote = random(1, 7);
          kokoXPos = 128;
          snailCounter = 0;
          lessonSequence = 0;
          gameMode = 4;
          break;
        case 4:
          // Cuddle
          cuddleCounter = 0;
          gameMode = 3;
          break;
        case 5:
          // Clean
          cleanSequence = 0;
          cleanCounter = 0;
          gameMode = 5;
          break;
        case 6:
          // Feed
          selectedFood = 0;
          feedSequence = 0;
          feedCounter = 0;
          gameMode = 2;
          break;
      }
    } else if (gameMode == 5) {
      // Clean The Cat game
      cleanCounter += 15;
    } else if (gameMode == 6) {
      // Game
      if (gameSequence == 0) {
        gamePick = random (0, 7);
        switch (gamePick) {
          case 0:
            if (score>666) {
              score -= 666;
            }
            break;
          case 1:
            strawberryFoodStock += 1;
            appleFoodStock += 1;
            grapeFoodStock += 1;
            milkFoodStock += 1;
            orangeFoodStock += 1;
            score += 500;
            break;
          case 2:
            strawberryFoodStock += 1;
            score += 300;
            break;
          case 3:
            appleFoodStock += 1;
            score += 200;
            break;
          case 4:
            grapeFoodStock += 1;
            score += 200;
            break;
          case 5:
            milkFoodStock += 1;
            score += 100;
            break;
          case 6:
            orangeFoodStock += 1;
            score += 200;
            break;
        }
        gameSequence = 1;
        gameCounter = 0;
        randomGameIconXPos = random(0, 3);
        randomFoodType = random(0, 7);
      }
    } else if (gameMode == 7) {
      if (randomVisitSequence == 0) {
        randomVisitSequence = 1;
        randomVisitCounter = 0;
      }
    }
  }
}

void loop() {
  if ( !arduboy.nextFrame() ) {
    return;
  }

  arduboy.clear();
  
  checkButton();
  frameCounter += 1;
  if (frameCounter > 4294967290) {
    frameCounter = 0;
    lastCatHungerCheck = 0;
    lastCatHygieneCheck = 0;
    lastCatMoraleCheck = 0;
    lastCatEducationCheck = 0;
    lastCatEntertainmentCheck = 0;
  }
  animationStep += 1;
  if (animationStep>animationStepMax) {
    animationStep=1;
  }

  // Refresh cat statistics
  // Hunger
  if (frameCounter == lastCatHungerCheck + catHungerStep) {
    catHunger -= 1;
    if (catHunger < 0) {
      catHunger = 0;
    }
    lastCatHungerCheck = frameCounter;
  }
  // Hygiene
  if (frameCounter == lastCatHygieneCheck + catHygieneStep) {
    catHygiene -= 1;
    if (catHygiene < 0) {
      catHygiene = 0;
    }
    lastCatHygieneCheck = frameCounter;
  }
  // Morale
  if (frameCounter == lastCatMoraleCheck + catMoraleStep) {
    catMorale -= 1;
    if (catMorale < 0) {
      catMorale = 0;
    }
    lastCatMoraleCheck = frameCounter;
  }
  // Education
  if (frameCounter == lastCatEducationCheck + catEducationStep) {
    if (catEducation < 3 && gameMode == 0) {
      // Time to study
      currentIcon = 3;
      gameMode = 1;
    }
    lastCatEducationCheck = frameCounter;
  }
  // Entertainment
  if (frameCounter == lastCatEntertainmentCheck + catEntertainmentStep) {
    catEntertainment -= 1;
    if (catEntertainment < 0) {
      catEntertainment = 0;
    }
    lastCatEntertainmentCheck = frameCounter;
  }

  // Act on cat stats
  if (catHunger == 0 && gameMode == 0) {
    // Time to feed the cat
    currentIcon = 6;
    randomVisit = random(0, 3136);
    if (randomVisit<2000 && randomVisit % 2 == 0) {
      randomVisitSequence = 0;
      randomVisitCounter = 0;
      gameMode = 7;
    } else {
      gameMode = 1;
    }
  } else if (catHygiene==0 && gameMode == 0) {
    // Time to clean
    currentIcon = 5;
    gameMode = 1;
  } else if (catMorale==0 && gameMode == 0) {
    // Time to cuddle
    currentIcon = 4;
    gameMode = 1;
  } else if (catEntertainment==0 && gameMode == 0) {
    // Time to play
    currentIcon = 2;
    gameMode = 1;
  }

  switch (gameMode) {
    case 0:
      // Idling
      animationStepMax = 4;
      checkButton();
      // Icon frame
      Sprites::drawSelfMasked(69, 1, speech_bubble_56x48, 0);
      // Icon (always happy)
      if (superHappyCounter<1) {
        Sprites::drawSelfMasked(87, 12, happy_cat_28x28, 0);
      } else {
        Sprites::drawSelfMasked(87, 12, super_happy_28x28, 0);
        superHappyCounter -= 1;
      }
      switch (animationStep) {
        case 1:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_001_48x48, 0);
          break;
        case 2:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_002_48x48, 0);
          break;
        case 3:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_003_48x48, 0);
          break;
        case 4:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_004_48x48, 0);
          break;
      }
      break;
    case 1:
      // Idle - looking left
      animationStepMax = 4;
      checkButton();
      // Icon frame
      Sprites::drawSelfMasked(69, 1, speech_bubble_56x48, 0);
      // Icon (anything else than happy)
      switch (currentIcon) {
        case 2:
          // Play
          Sprites::drawSelfMasked(85, 16, play_32x20, 0);
          break;
        case 3:
          // Study
          Sprites::drawSelfMasked(88, 12, study_26x28, 0);
          break;
        case 4:
          // Cuddle
          Sprites::drawSelfMasked(89, 14, cuddle_24x24, 0);
          break;
        case 5:
          // Bubbles
          Sprites::drawSelfMasked(86, 11, bubbles_30x30, 0);
          break;
        case 6:
          // Pizza
          Sprites::drawSelfMasked(88, 12, pizza_26x28, 0);
          break;
      }
      switch (animationStep) {
        case 1:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_001_48x48, 0);
          break;
        case 2:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_006_48x48, 0);
          break;
        case 3:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_007_48x48, 0);
          break;
        case 4:
          checkButton();
          Sprites::drawSelfMasked(8, 8, cat_sitting_004_48x48, 0);
          break;
      }
      break;
    case 2:
      // Feed
      switch (feedSequence) {
        case 0:
          // Select food
          if (strawberryFoodStock > 0) {
            selectedFood = 1;
            strawberryFoodStock -= 1;
            score += 30;
          } else if (grapeFoodStock > 0) {
            selectedFood = 2;
            grapeFoodStock -= 1;
            score += 20;
          } else if (milkFoodStock > 0) {
            selectedFood = 3;
            milkFoodStock -= 1;
            score += 10;
          } else if (orangeFoodStock > 0) {
            selectedFood = 4;
            orangeFoodStock -= 1;
            score += 20;
          } else if (appleFoodStock > 0) {
            selectedFood = 5;
            appleFoodStock -= 1;
            score += 20;
          } else {
            selectedFood = 6;
          }
          feedSequence = 1;
          break;
        case 1:
          // Eat food
          arduboy.setCursor(0, 58);
          switch (selectedFood) {
            case 1:
              Sprites::drawSelfMasked(50, 14, strawberry_28x28, 0);
              arduboy.print("Yummy strawberry");
              break;
            case 2:
              Sprites::drawSelfMasked(50, 14, grape_28x28, 0);
              arduboy.print("  Fresh grapes  ");
              break;
            case 3:
              Sprites::drawSelfMasked(50, 14, milk_28x28, 0);
              arduboy.print("   Farm milk    ");
              break;
            case 4:
              Sprites::drawSelfMasked(50, 14, orange_28x28, 0);
              arduboy.print("  Juicy orange  ");
              break;
            case 5:
              Sprites::drawSelfMasked(50, 14, apple_28x28, 0);
              arduboy.print("  Tasty apple   ");
              break;
            case 6:
              Sprites::drawSelfMasked(50, 14, ghost_28x28, 0);
              arduboy.print("    No food     ");
              break;
          }
          feedCounter += 1;
          if (feedCounter>9) {
            feedCounter = 0;
            if (selectedFood != 6) {
              feedSequence = 2;
            } else {
              gameMode = 0;
            }
          }
          break;
        case 2:
          // Yum
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          switch (selectedFood) {
            case 1:
              Sprites::drawSelfMasked(50, 14, strawberry_28x28, 0);
              break;
            case 2:
              Sprites::drawSelfMasked(50, 14, grape_28x28, 0);
              break;
            case 3:
              Sprites::drawSelfMasked(50, 14, milk_28x28, 0);
              break;
            case 4:
              Sprites::drawSelfMasked(50, 14, orange_28x28, 0);
              break;
            case 5:
              Sprites::drawSelfMasked(50, 14, apple_28x28, 0);
              break;
          }
          if (selectedFood != 6) {
            arduboy.setCursor(0, 59);
            arduboy.print("      Yum!      ");
          }
          feedCounter += 1;
          if (feedCounter>9) {
            feedCounter = 0;
            if (selectedFood < 6) {
              superHappyCounter = 100;
              catHunger = 3;
            }
            gameMode = 0;
          }
          break;
      }
      break;
    case 3:
      // Cuddle
      tinyfont.setCursor(70, 40);
      Sprites::drawSelfMasked(8, 8, cat_sitting_001_48x48, 0);
      cuddleCounter += 1;
      if (cuddleCounter<10) {
        Sprites::drawSelfMasked(80, 45 - cuddleCounter, cuddle_heart_11x10, 0);
        Sprites::drawSelfMasked(92, 40 - cuddleCounter, cuddle_heart_11x10, 0);
        Sprites::drawSelfMasked(104, 45 - cuddleCounter, cuddle_heart_11x10, 0);
      } else if (cuddleCounter>9 && cuddleCounter < 19) {
        Sprites::drawSelfMasked(80, 15, cuddle_heart_11x10, 0);
        Sprites::drawSelfMasked(92, 10, cuddle_heart_11x10, 0);
        Sprites::drawSelfMasked(104, 15, cuddle_heart_11x10, 0);
        tinyfont.print("I love you too");
      } else if (cuddleCounter>18 && cuddleCounter < 28) {
        tinyfont.print("I love you too");
      } else if (cuddleCounter==28) {
        superHappyCounter = 100;
        score += 50;
        catMorale = 3;
        gameMode = 0;
      }
      break;
    case 4:
      // Educate
      switch (lessonSequence) {
        case 0:
          // Snail arrives
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          Sprites::drawSelfMasked(kokoXPos, 40, koko_le_snail_26x22, 0);
          kokoXPos -= 1;
          if (kokoXPos < 97) {
            kokoXPos = 97;
          }
          snailCounter += 1;
          if (snailCounter>9) {
            snailCounter = 0;
            lessonSequence = 1;
          }
          break;
        case 1:
          // Snail says hello
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          Sprites::drawSelfMasked(97, 40, koko_le_snail_26x22, 0);
          arduboy.setCursor(0, 58);
          arduboy.print("       Hi! >    ");
          snailCounter += 1;
          if (snailCounter>9) {
            snailCounter = 0;
            lessonSequence = 2;
          }
          break;
        case 2:
          // Introduction
          arduboy.drawLine(0, 8, 127, 8, WHITE);
          arduboy.drawLine(0, 56, 127, 56, WHITE);
          Sprites::drawSelfMasked(97, 21, koko_le_snail_26x22, 0);
          tinyfont.setCursor(16, 18);
          tinyfont.print("Get ready for a\nnew lesson with...\n\n~ Koko Le Snail ~");
          snailCounter += 1;
          if (snailCounter>9) {
            snailCounter = 0;
            lessonSequence = 3;
          }
          break;
        case 3:
          // Snail wisdom quote
          arduboy.drawLine(0, 8, 127, 8, WHITE);
          arduboy.drawLine(0, 56, 127, 56, WHITE);
          Sprites::drawSelfMasked(97, 21, koko_le_snail_26x22, 0);
          tinyfont.setCursor(16, 18);
          switch (randomQuote) {
            case 1:
              tinyfont.print("Sometimes dogs\nare grey.\n\n  -- Koko");
              break;
            case 2:
              tinyfont.print("Do not sneeze\non the bus.\n\n  -- Koko");
              break;
            case 3:
              tinyfont.print("Always wear\npants.\n\n  -- Koko");
              break;
            case 4:
              tinyfont.print("Never yawn\nduring class.\n\n  -- Koko");
              break;
            case 5:
              tinyfont.print("Wash your hands\nafter lunch.\n\n  -- Koko");
              break;
            case 6:
              tinyfont.print("Pull my finger...\nteehee!\n\n  -- Koko");
              break;
          }
          snailCounter += 1;
          if (snailCounter>9) {
            snailCounter = 0;
            lessonSequence = 4;
          }
          break;
        case 4:
          // Score
          Sprites::drawSelfMasked(51, 12, study_26x28, 0);
          arduboy.setCursor(0, 58);
          arduboy.print("  + 1 Education ");
          snailCounter += 1;
          if (snailCounter>9) {
            snailCounter = 0;
            superHappyCounter = 100;
            score += 100;
            catEducation += 1;
            gameMode = 0;
          }
          break;
      }
      break;
    case 5:
      // Clean
      switch (cleanSequence) {
        case 0:
          // Clean The Cat game
          Sprites::drawSelfMasked(38, 8, cat_sitting_001_48x48, 0);
          checkButton();
          cleanCounter -= 1;
          if (cleanCounter<0) {
            cleanCounter = 0;
          } else if (cleanCounter>100) {
            cleanCounter = 0;
            cleanSequence = 1;
          }
          switch(cleanCounter) {
            case 5 ... 15:
              Sprites::drawSelfMasked(38, 32, bubbles_30x30, 0);
              break;
            case 16 ... 36:
              Sprites::drawSelfMasked(38, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(58, 32, bubbles_30x30, 0);
              break;
            case 37 ... 57:
              Sprites::drawSelfMasked(23, 16, bubbles_30x30, 0);
              Sprites::drawSelfMasked(38, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(58, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(73, 16, bubbles_30x30, 0);
              break;
            case 58 ... 78:
              Sprites::drawSelfMasked(23, 16, bubbles_30x30, 0);
              Sprites::drawSelfMasked(38, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(58, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(73, 16, bubbles_30x30, 0);
              Sprites::drawSelfMasked(32, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(64, 0, bubbles_30x30, 0);
              break;
            case 79 ... 89:
              Sprites::drawSelfMasked(23, 16, bubbles_30x30, 0);
              Sprites::drawSelfMasked(38, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(58, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(73, 16, bubbles_30x30, 0);
              Sprites::drawSelfMasked(0, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(32, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(64, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(96, 32, bubbles_30x30, 0);
              break;
            case 90 ... 100:
              Sprites::drawSelfMasked(0, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(32, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(64, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(96, 0, bubbles_30x30, 0);
              Sprites::drawSelfMasked(0, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(32, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(64, 32, bubbles_30x30, 0);
              Sprites::drawSelfMasked(96, 32, bubbles_30x30, 0);
          }
          break;
        case 1:
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          Sprites::drawSelfMasked(69, 50, cuddle_heart_11x10, 0);
          Sprites::drawSelfMasked(81, 50, cuddle_heart_11x10, 0);
          Sprites::drawSelfMasked(93, 50, cuddle_heart_11x10, 0);
          arduboy.setCursor(0, 16);
          arduboy.print("      All clean ");
          cleanCounter += 1;
          if (cleanCounter>9) {
            cleanCounter = 0;
            superHappyCounter = 100;
            score += 200;
            catHygiene = 3;
            gameMode = 0;
          }
          break;
      }
      break;
    case 6:
      // Play
      if (gameSequence == 0) {
        // Roll the dice
        checkButton();
        animationStepMax = 7;
        tinyfont.setCursor(13, 6);
        tinyfont.print("xxxx Catsino Deluxe xxxx");
        Sprites::drawSelfMasked(3, 18, casino_frame_40x40, 0);
        Sprites::drawSelfMasked(44, 18, casino_frame_40x40, 0);
        Sprites::drawSelfMasked(85, 18, casino_frame_40x40, 0);
        checkButton();
        if ( (gameCounter % 3) == 0) {
          randomGameIconXPos = random(0, 3);
          randomFoodType = random(0, 7);
        }
        switch (randomGameIconXPos) {
          case 0:
            gameIconXPos = 9;
            break;
          case 1:
            gameIconXPos = 50;
            break;
          case 2:
            gameIconXPos = 91;
            break;
        }
        checkButton();
        switch (randomFoodType) {
          case 0:
            Sprites::drawSelfMasked(gameIconXPos, 24, ghost_28x28, 0);
            break;
          case 1:
            Sprites::drawSelfMasked(gameIconXPos, 24, bar_28x28, 0);
            break;
          case 2:
            Sprites::drawSelfMasked(gameIconXPos, 24, strawberry_28x28, 0);
            break;
          case 3:
            Sprites::drawSelfMasked(gameIconXPos, 24, apple_28x28, 0);
            break;
          case 4:
            Sprites::drawSelfMasked(gameIconXPos, 24, grape_28x28, 0);
            break;
          case 5:
            Sprites::drawSelfMasked(gameIconXPos, 24, milk_28x28, 0);
            break;
          case 6:
            Sprites::drawSelfMasked(gameIconXPos, 24, orange_28x28, 0);
            break;
        }
        gameCounter += 1;
        if (gameCounter>180) {
          gameCounter = 0;
          gameMode = 0;
        }
      } else if (gameSequence == 1) {
        // See the result
        arduboy.setCursor(0, 58);
        switch (gamePick) {
          case 0:
            // Ghost
            Sprites::drawSelfMasked(50, 12, ghost_28x28, 0);
            arduboy.print(" Nothing, boo!  ");
            break;
          case 1:
            // Bar
            Sprites::drawSelfMasked(50, 12, bar_28x28, 0);
            arduboy.print("  + 1 of all!   ");
            break;
          case 2:
            // Strawberry
            Sprites::drawSelfMasked(50, 12, strawberry_28x28, 0);
            arduboy.print(" + 1 strawberry ");
            break;
          case 3:
            // Apple
            Sprites::drawSelfMasked(50, 12, apple_28x28, 0);
            arduboy.print("   + 1 apple    ");
            break;
          case 4:
            // Grape
            Sprites::drawSelfMasked(50, 12, grape_28x28, 0);
            arduboy.print("   + 1 grape    ");
            break;
          case 5:
            // Milk
            Sprites::drawSelfMasked(50, 12, milk_28x28, 0);
            arduboy.print("    + 1 milk    ");
            break;
          case 6:
            // Orange
            Sprites::drawSelfMasked(50, 12, orange_28x28, 0);
            arduboy.print("   + 1 orange   ");
            break;
        }
        gameCounter += 1;
        if (gameCounter>9) {
          gameCounter = 0;
          if (gamePick > 0) {
            superHappyCounter = 100;
            catEntertainment = 3;
          }
          gameMode = 0;
        }
      }
      break;
    case 7:
      // Random visitor
      switch (randomVisitSequence) {
        case 0:
          // Knock
          checkButton();
          Sprites::drawSelfMasked(50, 14, door_28x30, 0);
          tinyfont.setCursor(40, 59);
          tinyfont.print("Knock knock!");
          randomVisitCounter += 1;
          if (randomVisitCounter>1800) {
            randomVisitSequence = 1;
            randomVisitCounter = 0;
          }
          break;
        case 1:
          // Hello
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          Sprites::drawSelfMasked(96, 14, cindy_28x26, 0);
          tinyfont.setCursor(45, 59);
          tinyfont.print("Hi friend!");
          randomVisitCounter += 1;
          if (randomVisitCounter>9) {
            randomVisitSequence = 2;
            randomVisitCounter = 0;
          }
          break;
        case 2:
          // Gift
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          Sprites::drawSelfMasked(96, 14, cindy_28x26, 0);
          tinyfont.setCursor(45, 59);
          if (randomVisit<51) {
            // Matcha
            tinyfont.print("I got matcha tea!");
          } else {
            tinyfont.print("I got coco cake!");
          }
          randomVisitCounter += 1;
          if (randomVisitCounter>9) {
            randomVisitSequence = 3;
            randomVisitCounter = 0;
          }
          break;
        case 3:
          // Drink
          Sprites::drawSelfMasked(-24, 13, cat_sitting_001_48x48, 0);
          if (randomVisit<51) {
            // Matcha
            Sprites::drawSelfMasked(49, 14, matcha_30x32, 0);
          } else {
            Sprites::drawSelfMasked(49, 14, coco_cake_28x32, 0);
          }
          Sprites::drawSelfMasked(96, 14, cindy_28x26, 0);
          tinyfont.setCursor(45, 59);
          tinyfont.print("Have some <3");
          randomVisitCounter += 1;
          if (randomVisitCounter>9) {
            randomVisitSequence = 4;
            randomVisitCounter = 0;
          }
          break;
        case 4:
          // Bonus
          if (randomVisit<51) {
            // Matcha
            Sprites::drawSelfMasked(49, 14, matcha_30x32, 0);
          } else {
            Sprites::drawSelfMasked(49, 14, coco_cake_28x32, 0);
          }
          arduboy.setCursor(0, 59);
          arduboy.print("      Yum!      ");
          randomVisitCounter += 1;
          if (randomVisitCounter>9) {
            randomVisitSequence = 0;
            randomVisitCounter = 0;
            superHappyCounter = 100;
            score += 10000;
            catHunger = 3;
            gameMode = 0;
          }
          break;
      }
      break;
    case 99:
      // Show version
      arduboy.setCursor(0, 50);
      arduboy.print(" TiMiNoo v1.2.8 ");
      versionCounter += 1;
      if (versionCounter>9) {
        gameMode = 0;
      }
      break;
  }
  if (gameMode < 2) {
    // Score
    ltoa(score, scoreString, 10);
    tinyfont.setCursor(81, 60);
    tinyfont.print(scoreString);
  }
  
  arduboy.display();
}
